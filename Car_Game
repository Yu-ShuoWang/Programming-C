#include <stdio.h>
#define MAP_SIZE 12
#define CAR_SIZE 3
/*#define ONLINE_JUDGE*/
int map[MAP_SIZE][MAP_SIZE];
void map_reset(void);
void map_show(void);


int blocks[MAP_SIZE][MAP_SIZE];
void blocks_read(void);
void blocks_put_on_map(void);

int jewels[MAP_SIZE][MAP_SIZE];
void jewels_read(void);
void jewels_put_on_map(void);


int car[CAR_SIZE][CAR_SIZE] = {{'O', 'O', '@'}, {'O', 'O', 'O'}, {'O', 'O', '@'}};
int car_row = 3;
int car_col = 4;
int car_direction = 0;
int car_earnings = 0;
void rotate_90(void);
void car_move(void);
void car_put_on_map(void);



int main(void){
    int ch;
    blocks_read();
    jewels_read();

    map_reset();
	blocks_put_on_map();
	jewels_put_on_map();
	car_put_on_map();
	map_show();

#ifndef ONLINE JUDGE
    freopen("actions.txt" , "r" , stdin);
#endif // ONLINE

    while( (ch = getchar() ) != EOF){
        map_reset();
        if (ch == 'R'){
            rotate_90();
        }
        else if (ch == 'F'){
            car_move();
        }
        else {}


        blocks_put_on_map();
        jewels_put_on_map();
        car_put_on_map();
#ifndef ONLINE JUDGE
        map_show();
#endif // ONLINE
    }
    printf("Earnings : %d\n", car_earnings);
    printf("Position : row = %d, col = %d \n.", car_row, car_col);
    char dirction[] = "RDLU";
    printf("Direction: %c \n", dirction[car_direction]);
        return 0;

}

void blocks_read(void){
    int i, n;
    int row, col;
#ifndef ONLINE JUDGE
    freopen("blocks.txt", "r" , stdin );
#endif // ONLINE
    scanf("%d", &n);
    for(i = 0; i < n; i++){
        scanf("%d%d", &row, &col);
        blocks[row][col] = 1;
    }
}
void jewels_read(void){
    int i, n;
    int row, col;
//#ifndef ONLINE JUDGE
    freopen("jewels.txt", "r", stdin);
//#endif // ONLINE
    scanf("%d", &n);
    for(i =0; i < n; i++){
        scanf("%d%d", &row, &col);
        jewels[row][col] = 1;
    }
}

void blocks_put_on_map(){
    int i, j;
    for( i = 0; i < MAP_SIZE; i++){
        for( j = 0; j < MAP_SIZE; j++){
            if (blocks[i][j] )
                map[i][j] = '#';
        }
    }
}

void jewels_put_on_map(void){
    int i, j;
    for(i = 0; i < MAP_SIZE; i++){
        for(j = 0; j < MAP_SIZE; j++){
            if (jewels[i][j])
                map[i][j] = '$';
        }
    }
}


void map_reset(void){
    int i , j;
    for(i = 0; i < MAP_SIZE; i++) {
        for(j=0; j < MAP_SIZE; j++) {
            map[i][j] = '.';
        }
    }
    for(i = 0; i <MAP_SIZE; i++){
        map[i][0] = 'H';
        map[i][MAP_SIZE-1] = 'H';
    }
    for(j = 0; j <MAP_SIZE; j++){
        map[0][j] = 'H';
        map[MAP_SIZE-1][j] = 'H';
    }
}

void map_show(void){
    int i, j;
    for(i = 0; i < MAP_SIZE; i++){
        for(j = 0; j < MAP_SIZE; j++){
            printf("%c", map[i][j]);
        }
        printf("\n");
    }
}

void car_put_on_map(void){
    int i, j;
    for(i = 0; i < CAR_SIZE; i++){
        for(j = 0; j < CAR_SIZE; j++){
            map[car_row + i][car_col + j] = car[i][j];
        }
    }
}

void rotate_90(void){
    int temp;
    printf("Rotate\n");
    if (car_direction %2  ){
        temp = car[2][2];
        car[2][2] = car[0][0];
        car[0][0] = temp;
    }
    else {
        temp = car[0][2];
        car[0][2] = car[2][0];
        car[2][0] = temp;
    }

    car_direction = (car_direction+1)% 4;
}

void car_move(void){
    int i, j, valid ;
    int car_row_n;
    int car_col_n;
    int dir_r[4] = {0, 1, 0, -1};
    int dir_c[4] = {1, 0, -1, 0};
    printf("move forward\n");
    car_row_n = car_row + dir_r[car_direction];
    car_col_n = car_col + dir_c[car_direction];

    valid = 1;
    for(i = 0; i < CAR_SIZE; i++ ){
        for(j = 0; j < CAR_SIZE; j++){
            if (blocks[i + car_row_n][j + car_col_n] != 0 || map[i + car_row_n][i + car_row_n] != '.' )
                valid = 0;
        }
    }

    if (valid){
        car_row = car_row_n;
        car_col = car_col_n;
    }

    for(i = 0; i < CAR_SIZE; i++){
        for(j = 0; j < CAR_SIZE; j++){
            if (jewels[car_row + i][car_col + j] >= 1){
                jewels[car_row + i][car_col + j] = 0;
                car_earnings++;
            }
        }
    }
}
